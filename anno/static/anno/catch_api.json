{
    "swagger": "2.0",
    "info": {
        "version": "0.1.0",
        "title": "CATCH Annotation API"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/annos/{id}": {
            "get": {
                "summary": "Gets the `Annotation` object for the given id",
                "description": "The requesting user must have permission to read the Annotation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "annotation id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-CATCH-RESPONSE-FORMAT",
                        "required": false,
                        "in": "header",
                        "type": "string",
                        "description": "the annotation format can be returned as Catch WebAnnotation or AnnotatorJS",
                        "default": "CATCH_ANNO_FORMAT",
                        "example": "CATCH_ANNO_FORMAT or ANNOTATORJS_FORMAT"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/Annotation"
                        }
                    },
                    "203": {
                        "description": "Successful but unable to convert to requested format (usually AnnotatorJS)",
                        "schema": {
                            "$ref": "#/definitions/FailedItem"
                        }
                    },
                    "400": {
                        "description": "bad request: invalid input format",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "unauthorized: missing or invalid jwt token"
                    },
                    "403": {
                        "description": "forbidden: request was understood but user is not authorized to perform operation requested",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "conflict: usually, conflicting references or dependencies",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "422": {
                        "description": "unprocessable entity: unknown or missing type/value in input",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "internal error: some other runtime exceeption occurred.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "jwt_catchpy2": []
                    }
                ]
            },
            "post": {
                "summary": "Creates an `Annotation` object",
                "description": "Omit the `id` property of the annotation input parameter object, and a new one will be created and returned in the response. If an `id` is included in the annotation input parameter, it will try to be honored but the create action will fail if already present in storage.",
                "parameters": [
                    {
                        "name": "X-CATCH-RESPONSE-FORMAT",
                        "required": false,
                        "in": "header",
                        "type": "string",
                        "description": "the annotation format can be returned as Catch WebAnnotation or AnnotatorJS",
                        "example": "CATCH_ANNO_FORMAT or ANNOTATORJS_FORMAT"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "annotation id",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "anno",
                        "in": "body",
                        "description": "annotation object",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Annotation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "headers": {
                            "Location": {
                                "description": "url for the created annotation",
                                "type": "string"
                            }
                        },
                        "schema": {
                            "$ref": "#/definitions/Annotation"
                        }
                    },
                    "203": {
                        "description": "Successful but unable to convert to requested format (usually AnnotatorJS)",
                        "headers": {
                            "Location": {
                                "description": "url for the created annotation",
                                "type": "string"
                            }
                        },
                        "schema": {
                            "$ref": "#/definitions/FailedItem"
                        }
                    },
                    "400": {
                        "description": "bad request: invalid input format",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "unauthorized: missing or invalid jwt token"
                    },
                    "403": {
                        "description": "forbidden: request was understood but user is not authorized to perform operation requested",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "conflict: usually, conflicting references or dependencies",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "422": {
                        "description": "unprocessable entity: unknown or missing type/value in input",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "internal error: some other runtime exceeption occurred.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "jwt_catchpy2": []
                    }
                ]
            },
            "put": {
                "summary": "Updates an `Annotation` object",
                "description": "This operation will replace the list of tags and targets with the ones sent as input",
                "parameters": [
                    {
                        "name": "X-CATCH-RESPONSE-FORMAT",
                        "required": false,
                        "in": "header",
                        "type": "string",
                        "description": "the annotation format can be returned as Catch WebAnnotation or AnnotatorJS",
                        "example": "CATCH_ANNO_FORMAT or ANNOTATORJS_FORMAT"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "annotation id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "headers": {
                            "Location": {
                                "description": "url for the updated annotation",
                                "type": "string"
                            }
                        },
                        "schema": {
                            "$ref": "#/definitions/Annotation"
                        }
                    },
                    "203": {
                        "description": "Successful but unable to convert to requested format (usually AnnotatorJS)",
                        "headers": {
                            "Location": {
                                "description": "url for the created annotation",
                                "type": "string"
                            }
                        },
                        "schema": {
                            "$ref": "#/definitions/FailedItem"
                        }
                    },
                    "400": {
                        "description": "bad request: invalid input format",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "unauthorized: missing or invalid jwt token"
                    },
                    "403": {
                        "description": "forbidden: request was understood but user is not authorized to perform operation requested",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "conflict: usually, conflicting references or dependencies",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "422": {
                        "description": "unprocessable entity: unknown or missing type/value in input",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "internal error: some other runtime exceeption occurred.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "jwt_catchpy2": []
                    }
                ]
            },
            "delete": {
                "summary": "Deletes an `Annotation` object",
                "description": "The requesting user must have permission to delete the Annotation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "annotation id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "203": {
                        "description": "Successful but unable to convert to requested format (usually AnnotatorJS)",
                        "schema": {
                            "$ref": "#/definitions/FailedItem"
                        }
                    },
                    "400": {
                        "description": "bad request: invalid input format",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "unauthorized: missing or invalid jwt token"
                    },
                    "403": {
                        "description": "forbidden: request was understood but user is not authorized to perform operation requested",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "conflict: usually, conflicting references or dependencies",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "422": {
                        "description": "unprocessable entity: unknown or missing type/value in input",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "internal error: some other runtime exceeption occurred.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "jwt_catchpy2": []
                    }
                ]
            }
        },
        "/annos/": {
            "get": {
                "summary": "Returns list of `Annotation` objects resulting from the given search",
                "parameters": [
                    {
                        "name": "X-CATCH-RESPONSE-FORMAT",
                        "required": false,
                        "in": "header",
                        "type": "string",
                        "description": "the annotation format can be returned as Catch WebAnnotation or AnnotatorJS",
                        "example": "CATCH_ANNO_FORMAT or ANNOTATORJS_FORMAT"
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "max number of annotations in response; `-1` means all results, default is `10`, max is `200` (but configurable)",
                        "type": "integer",
                        "default": "10"
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "where the slice of returned `Annotation` objects should start; default is `0`",
                        "type": "integer",
                        "default": "0"
                    },
                    {
                        "name": "userid",
                        "required": false,
                        "in": "query",
                        "description": "repeat if you want a _OR_ list; ex: ?userid=jsnow&userid=rstark&userid=tgreyjoy",
                        "type": "string"
                    },
                    {
                        "name": "username",
                        "required": false,
                        "in": "query",
                        "description": "repeat if you want a _OR_ list; ex: ?username=firstofhername&userid=theunburnt&userid=motherofdragons",
                        "type": "string"
                    },
                    {
                        "name": "target_source",
                        "required": false,
                        "in": "query",
                        "description": "repeat if you want a _OR_ list; ex: ?source=http//winterfell.no&source=http//dorn.so&source=http//essos.we",
                        "type": "string"
                    },
                    {
                        "name": "text",
                        "required": false,
                        "in": "query",
                        "description": "fulltext search in body of annotation; note that this is _NOT_ an exact search",
                        "type": "string"
                    },
                    {
                        "name": "media",
                        "required": false,
                        "in": "query",
                        "description": "repeat if you want a _OR_ list; ex: ?media=Video&media=Annotation. Note that media type changed for replies: for catchpy v2 use `Annotation` instead of `comment`",
                        "type": "string"
                    },
                    {
                        "name": "tag",
                        "required": false,
                        "in": "query",
                        "description": "repeat if you want a _AND_ list; ex: ?tag=firstofhisname&tag=protectoroftherealm&tag=lannister",
                        "type": "string"
                    },
                    {
                        "name": "platform",
                        "required": false,
                        "in": "query",
                        "description": "lti platform name",
                        "type": "string"
                    },
                    {
                        "name": "source_id",
                        "required": false,
                        "in": "query",
                        "description": "source_id is the internal reference for a target, property of annotation `platform`",
                        "type": "string"
                    },
                    {
                        "name": "context_id",
                        "required": false,
                        "in": "query",
                        "description": "context_id with the given platform",
                        "type": "string"
                    },
                    {
                        "name": "collection_id",
                        "required": false,
                        "in": "query",
                        "description": "collection_id within the given context_id; ignored if context_id not present",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/SearchResult"
                        }
                    },
                    "401": {
                        "description": "unauthorized: missing or invalid jwt token"
                    },
                    "403": {
                        "description": "forbidden: request was understood but user is not authorized to perform operation requested",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "internal error: some other runtime exceeption occurred.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "jwt_catchpy2": []
                    }
                ]
            }
        },
        "/annos/create": {
            "post": {
                "tags": ["catch-annotator"],
                "summary": "Creates an `Annotation` object",
                "description": "The annotation 'id' in the request body is ignored, and a new 'id' is created and returned in the response",
                "parameters": [
                    {
                        "name": "anno",
                        "in": "body",
                        "description": "annotation object",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Annotator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/Annotator"
                        }
                    },
                    "400": {
                        "description": "bad request: invalid input format",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "unauthorized: missing or invalid jwt token"
                    },
                    "403": {
                        "description": "forbidden: request was understood but user is not authorized to perform operation requested",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "conflict: usually, conflicting references or dependencies",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "422": {
                        "description": "unprocessable entity: unknown or missing type/value in input",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "internal error: some other runtime exceeption occurred.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "jwt_annotator": []
                    }
                ]
            }
        },
        "/annos/update": {
            "put": {
                "tags": ["catch-annotator"],
                "summary": "Updates an `Annotation` object",
                "description": "This operation will replace the list of tags and targets with the ones sent as input",
                "parameters": [
                    {
                        "name": "anno",
                        "in": "body",
                        "description": "annotation object",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Annotator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/Annotator"
                        }
                    },
                    "400": {
                        "description": "bad request: invalid input format",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "unauthorized: missing or invalid jwt token"
                    },
                    "403": {
                        "description": "forbidden: request was understood but user is not authorized to perform operation requested",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "conflict: usually, conflicting references or dependencies",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "422": {
                        "description": "unprocessable entity: unknown or missing type/value in input",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "internal error: some other runtime exceeption occurred.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "jwt_annotator": []
                    }
                ]
            },
            "post": {
                "tags": ["catch-annotator"],
                "summary": "see `PUT`",
                "security": [
                    {
                        "jwt_annotator": []
                    }
                ]
            }
        },
        "/annos/delete": {
            "delete": {
                "tags": ["catch-annotator"],
                "summary": "Deletes an `Annotation` object",
                "description": "The requesting user must have permission to delete the Annotation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "annotation id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "400": {
                        "description": "bad request: invalid input format",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "unauthorized: missing or invalid jwt token"
                    },
                    "403": {
                        "description": "forbidden: request was understood but user is not authorized to perform operation requested",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "conflict: usually, conflicting references or dependencies",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "422": {
                        "description": "unprocessable entity: unknown or missing type/value in input",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "internal error: some other runtime exceeption occurred.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "jwt_annotator": []
                    }
                ]
            }
        },
        "/annos/search": {
            "get": {
                "tags": ["catch-annotator"],
                "summary": "Returns list of `Annotation` objects resulting from the given search",
                "parameters": [
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "max number of annotations in response; `-1` means all results, default is `10`, max is `200` but configurable",
                        "type": "integer",
                        "default": "10"
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "where the slice of returned `Annotation` objects should start; default is `0`",
                        "type": "integer",
                        "default": "0"
                    },
                    {
                        "name": "userid",
                        "required": false,
                        "in": "query",
                        "description": "repeat if you want a _OR_ list; ex: ?userid=jsnow&userid=rstark&userid=tgreyjoy",
                        "type": "string"
                    },
                    {
                        "name": "username",
                        "required": false,
                        "in": "query",
                        "description": "repeat if you want a _OR_ list; ex: ?username=firstofhername&userid=theunburnt&userid=motherofdragons",
                        "type": "string"
                    },
                    {
                        "name": "source",
                        "required": false,
                        "in": "query",
                        "description": "repeat if you want a _OR_ list; ex: ?source=http//winterfell.no&source=http//dorn.so&source=http//essos.we. Corresponds to catchpy v2 search paramenter `target_source`",
                        "type": "string"
                    },
                    {
                        "name": "text",
                        "required": false,
                        "in": "query",
                        "description": "fulltext search in body of annotation. Note that the behavior changed and this is _NOT_ an exact search and might bring more results that in catch v1.2",
                        "type": "string"
                    },
                    {
                        "name": "media",
                        "required": false,
                        "in": "query",
                        "description": "repeat if you want a _OR_ list; ex: ?media=video&media=comment",
                        "type": "string"
                    },
                    {
                        "name": "tag",
                        "required": false,
                        "in": "query",
                        "description": "repeat if you want a _OR_ list; ex: ?tag=firstofhisname&tag=protectoroftherealm&tag=lannister",
                        "type": "string"
                    },
                    {
                        "name": "uri",
                        "required": false,
                        "in": "query",
                        "description": "exact match for property `uri`; corresponds to search parameter `source_id` in catchpy v2",
                        "type": "string"
                    },
                    {
                        "name": "parentid",
                        "required": false,
                        "in": "query",
                        "description": "internal id for parent annotation; meaning `search for replies to this parent annotation`. Note that `parentid` search parameter is valid in backward-compatible mode only; to search for replies to an annotation in catchpy v2 do: ?media=Annotation&source_id=(parent_annotation_id)",
                        "allowEmptyValue": true,
                        "type": "string",
                        "format": "int32"
                    },
                    {
                        "name": "contextId",
                        "required": false,
                        "in": "query",
                        "description": "exact match for property `contextId`. Note that, in catchpy v2, `contextId` search parameter changed to `context_id`",
                        "type": "string"
                    },
                    {
                        "name": "collectionId",
                        "required": false,
                        "in": "query",
                        "description": "exact match for property `collectionId`. Note that, in catchpy v2, `collectionId` search parameter changed to `collection_id`",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/SearchResult"
                        }
                    },
                    "401": {
                        "description": "unauthorized: missing or invalid jwt token"
                    },
                    "403": {
                        "description": "forbidden: request was understood but user is not authorized to perform operation requested",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "internal error: some other runtime exceeption occurred.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "jwt_annotator": []
                    }
                ]
            },
            "post": {
                "tags": ["catch-annotator"],
                "summary": "see `GET`",
                "security": [
                    {
                        "jwt_annotator": []
                    }
                ]
            }
        },
        "/annos/update_tags": {
            "put": {
                "tags": ["not yet available"],
                "summary": "TO BE IMPLEMENTED",
                "description": "TO BE IMPLEMENTED! Replaces the list of tags in the given `Annotation` object;; the requesting user must permission to update the Annnotation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "annotation id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "tags",
                        "in": "body",
                        "description": "list of tags",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Tags"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/Annotation"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "jwt_catchpy2": []
                    }
                ]
            }
        },
        "/annos/update_text": {
            "put": {
                "tags": ["not yet available"],
                "summary": "TO BE IMPLEMENTED",
                "description": "TO BE IMPLEMENTED! Replaces the textual body of given `Annotation` object; the requesting user must have permission to update the Annotation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "annotation id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "text",
                        "in": "body",
                        "description": "annotation text",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BodyItem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/Annotation"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "jwt_catchpy2": []
                    }
                ]
            }
        },
        "/annos/update_target": {
            "put": {
                "tags": ["not yet available"],
                "summary": "TO BE IMPLEMENTED",
                "description": "TO BE IMPLEMENTED! Replaces the list of targets of given `Annotation` object; the requesting user must have permission to update the Annotation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "annotation id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "target",
                        "in": "body",
                        "description": "annotation target object",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Target"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/Annotation"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "jwt_catchpy2": []
                    }
                ]
            }
        }
    },
    "securityDefinitions": {
        "jwt_catchpy2": {
            "description": "jwt token; the jwt token must be prefixed with a 'token ' string; ex: Authorization: 'token <encoded_jwt_token>'",
            "type": "apiKey",
            "name": "authorization",
            "in": "header",
            "example": "token eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ"
        },
        "jwt_annotator": {
            "description": "jwt token for backward-compatibility",
            "type": "apiKey",
            "name": "x-annotator-auth-token",
            "in": "header",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ"
        }
    },
    "definitions": {
        "Annotation": {
            "type": "object",
            "required": ["id", "body", "target",
        "platform", "permissions", "creator", "schema_version"],
            "properties": {
                "id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "schema_version": {
                    "type": "string"
                },
                "created": {
                    "type": "string",
                    "format": "dateTime"
                },
                "modified": {
                    "type": "string",
                    "format": "dateTime"
                },
                "creator": {
                    "$ref": "#/definitions/Creator"
                },
                "permissions": {
                    "$ref": "#/definitions/Permissions"
                },
                "platform": {
                    "$ref": "#/definitions/Platform"
                },
                "body": {
                    "$ref": "#/definitions/Body"
                },
                "target": {
                    "$ref": "#/definitions/Target"
                }
            }
        },
        "Body": {
            "type": "object",
            "required": ["type", "items"],
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "Choice",
                        "List"
                    ]
                },
                "items": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/BodyItem"
                    }
                }
            }
        },
        "BodyItem": {
            "type": "object",
            "required": ["type", "purpose", "value"],
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "TextualBody"
                    ]
                },
                "format": {
                    "type": "string",
                    "enum": [
                        "text/html",
                        "text/plain",
                        "text/richtext",
                        "application/rtf",
                        "application/x-rtf"
                    ]
                },
                "purpose": {
                    "type": "string",
                    "enum": [
                        "commenting",
                        "tagging",
                        "replying"
                    ]
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "Target": {
            "type": "object",
            "required": ["type", "items"],
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "Choice",
                        "List"
                    ]
                },
                "items": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/TargetItem"
                    }
                }
            }
        },
        "TargetItem": {
            "type": "object",
            "required": ["source", "type"],
            "properties": {
                "source": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "Text",
                        "Image",
                        "Video",
                        "Audio",
                        "Thumbnail",
                        "Annotation",
                        "Choice"
                    ]
                },
                "format": {
                    "type": "string"
                },
                "selector": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "enum": [
                                "Choice",
                                "List"
                            ]
                        },
                        "items": {
                            "type": "array",
                            "minItems": 0,
                            "items": {
                                "$ref": "#/definitions/SelectorItem"
                            }
                        }
                    }
                },
                "scope": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "enum": [
                                "Viewport"
                            ]
                        },
                        "value": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "SelectorItem": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "RangeSelector",
                        "XPathSelector",
                        "TextPositionSelector",
                        "TextQuoteSelector",
                        "CssSelector",
                        "FragmentSelector",
                        "SvgSelector"
                    ]
                },
                "conformsTo": {
                    "type": "string"
                },
                "refinedBy": {
                    "type": "array",
                    "minItems": 0,
                    "items": {
                        "$ref": "#/definitions/SelectorItem"
                    }
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "Creator": {
            "type": "object",
            "required": ["id", "name"],
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "Permissions": {
            "type": "object",
            "required": ["can_read", "can_update", "can_delete", "can_admin"],
            "properties": {
                "can_read": {
                    "$ref": "#/definitions/Permission"
                },
                "can_update": {
                    "$ref": "#/definitions/Permission"
                },
                "can_delete": {
                    "$ref": "#/definitions/Permission"
                },
                "can_admin": {
                    "$ref": "#/definitions/Permission"
                }
            }
        },
        "Permission": {
            "type": "array",
            "minItems": 0,
            "items": {
                "type": "string"
            },
            "uniqueItems": true
        },
        "Platform": {
            "type": "object",
            "required": ["platform_name", "context_id"],
            "properties": {
                "platform_name": {
                    "type": "string"
                },
                "context_id": {
                    "type": "string"
                },
                "collection_id": {
                    "type": "string"
                },
                "target_source_id": {
                    "type": "string"
                }
            }
        },
        "Tags": {
            "type": "array",
            "minItems": 0,
            "items": {
                "type": "string"
            }
        },
        "SearchResult": {
            "type": "object",
            "properties": {
                "total": {
                    "type": "integer",
                    "description": "total of objects found for search"
                },
                "size": {
                    "type": "integer",
                    "description": "number of objects returned in this list"
                },
                "limit": {
                    "type": "integer",
                    "description": "max number of objects requested"
                },
                "offset": {
                    "type": "integer",
                    "description": "requested offset"
                },
                "size_failed": {
                    "type": "integer",
                    "description": "number of objects that failed to be formatted"
                },
                "failed": {
                    "type": "array",
                    "minItems": 0,
                    "items": {
                        "$ref": "#/definitions/FailedItem"
                    }
                },
                "rows": {
                    "type": "array",
                    "minItems": 0,
                    "items": {
                        "$ref": "#/definitions/Annotation"
                    }
                }
            }
        },
        "FailedItem": {
            "type": "object",
            "required": ["id", "msg"],
            "properties": {
                "id": {"type": "string"},
                "msg": {"type": "string", "description": "error message"}
            }
        },
        "Error": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "integer",
                    "format": "int32",
                    "description": "http status code"

                },
                "payload": {
                    "type": "array",
                    "minItems": 0,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "Annotator": {
            "description": "The AnnotatorJS object as catchpy v2 understands it. Some properties like 'deleted', or 'archived', were considered insipid, thus removed. Other properties like 'uri' are always 'strings' (while catch v1.2 would, at times, return integers, other times, strings.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "created": {
                    "type": "string",
                    "format": "dateTime"
                },
                "updated": {
                    "type": "string",
                    "format": "dateTime"
                },
                "contextId": {"type": "string"},
                "collectionId": {"type": "string"},
                "user": {
                    "$ref": "#/definitions/Creator"
                },
                "permissions": {
                    "$ref": "#/definitions/AnnotatorPermissions"
                },
                "parent": {
                    "type": "string",
                    "format": "int32"
                },
                "media": {
                    "type": "string",
                    "enum": ["text", "image", "video", "audio", "comment"]
                },
                "text": {"type": "string"},
                "quote": {"type": "string"},
                "uri": {"type": "string"},
                "ranges": {
                    "type": "object",
                    "properties": {
                        "start": {"type": "string"},
                        "end": {"type": "string"},
                        "startOffset": {"type": "integer"},
                        "endOffset": {"type": "integer"}
                    }
                },
                "rangePosition": {
                    "description": "target selector when target is 'image'. Note that this property can be also a list of strings, or a WebAnnotation FragmentSelector, depending on the mood of mirador.",
                    "type": "object",
                    "properties": {
                        "height": {"type": "string"},
                        "width": {"type": "string"},
                        "x": {"type": "string"},
                        "y": {"type": "string"}
                    }
                },
                "thumb": {
                    "description": "alternate target source, when target is 'image'; target source is givenas an url for a thumbnail to the original image",
                    "type": "string"
                },
                "bounds": {
                    "description": "target selector when target is 'image'",
                    "type": "object",
                    "properties": {
                        "height": {"type": "string"},
                        "width": {"type": "string"},
                        "x": {"type": "string"},
                        "y": {"type": "string"}
                    }
                },
                "rangeTime": {
                    "description": "target selector when target is 'video' or 'audio'",
                    "type": "object",
                    "properties": {
                        "start": {"type": "integer"},
                        "end": {"type": "integer"}
                    }
                },
                "target": {
                    "description": "target selector when target is 'video' or 'audio'",
                    "type": "object",
                    "properties": {
                        "container": {"type": "string"},
                        "src": {"type": "string"},
                        "ext": {"type": "string"}
                    }
                },
                "tags": {
                    "type": "array",
                    "minItems": 0,
                    "items": {"type": "string"}
                },
                "totalComments": {"type": "integer"}
            }
        },
        "AnnotatorPermissions": {
            "type": "object",
            "required": ["read", "update", "delete", "admin"],
            "properties": {
                "read": {
                    "$ref": "#/definitions/AnnotatorPermission"
                },
                "update": {
                    "$ref": "#/definitions/AnnotatorPermission"
                },
                "delete": {
                    "$ref": "#/definitions/AnnotatorPermission"
                },
                "admin": {
                    "$ref": "#/definitions/AnnotatorPermission"
                }
            }
        },
        "AnnotatorPermission": {
            "type": "array",
            "minItems": 0,
            "items": {"type": "string"},
            "uniqueItems": true
        }
    },
    "tags": [
        {
            "name": "catch-annotator",
            "description": "API for backwards-compatibility to catch v1.2 backend.",
            "externalDocs": "not available"
        }
    ]
}
